AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Toro AI Assistant - Backend serverless for answering investment questions

Parameters:
  KnowledgeBaseId:
    Type: String
    Description: ID of the Knowledge Base in Amazon Bedrock
    Default: ""
  BedrockModel:
    Type: String
    Description: ID of the Amazon Bedrock AI model
    Default: "us.amazon.nova-pro-v1:0"
  Stage:
    Type: String
    Description: Deployment stage
    Default: "dev"
  AwsAccountId:
    Type: String
    Description: AWS Account ID for ARN creation
    Default: ""

Globals:
  Function:
    Runtime: python3.11
    Timeout: 30
    MemorySize: 256
    Layers:
      - !Ref CommonLibLayer
    Environment:
      Variables:
        TABLE_NAME: !Ref QuestionsTable
        PROCESS_TOPIC: !Ref ProcessTopic
        NOTIFY_TOPIC: !Ref NotifyTopic
        KNOWLEDGE_BASE_ID: !Ref KnowledgeBaseId
        INFERENCE_PROFILE_ID: !Ref BedrockModel
        AWS_ACCOUNT_ID: !Ref AwsAccountId
        PYTHONPATH: /opt/python:/opt/python/lib/python3.11/site-packages
  Api:
    Cors:
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Resources:
  CommonLibLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: toro-ai-assistant-lib
      Description: Shared library for Toro AI Assistant
      ContentUri: ../layer
      CompatibleRuntimes:
        - python3.11
      RetentionPolicy: Retain

  IngestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src/questions/ingest/
      Handler: handler.lambda_handler
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /questions
            Method: post
      Environment:
        Variables:
          SNS_TOPIC: !Ref ProcessTopic
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref QuestionsTable
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt ProcessTopic.TopicName

  ProcessFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src/questions/process/
      Handler: handler.lambda_handler
      Timeout: 60
      MemorySize: 512
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref ProcessTopic
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref QuestionsTable
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt NotifyTopic.TopicName
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
                - bedrock:RetrieveAndGenerate
                - bedrock:Retrieve
                - bedrock-agent-runtime:Retrieve
                - bedrock-agent-runtime:RetrieveAndGenerate
              Resource: '*'

  NotifyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src/questions/notify/
      Handler: handler.lambda_handler
      Environment:
        Variables:
          CONNECTIONS_TABLE: !Ref ConnectionsTable
          WEBSOCKET_API_ENDPOINT: !Sub "https://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${WebSocketStage}"
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref NotifyTopic
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref QuestionsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - execute-api:ManageConnections
              Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${WebSocketStage}/*"

  QuestionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: toro-ai-assistant-questions
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  # Tabela para conexões WebSocket
  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: toro-websocket-connections
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # Handler de conexão WebSocket
  WebSocketHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src/websocket/
      Handler: handler.lambda_handler
      Environment:
        Variables:
          CONNECTIONS_TABLE: !Ref ConnectionsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTable

  # API Gateway WebSocket
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: toro-chat-websocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action

  # Rota $connect
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectIntegration

  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketHandler.Arn}/invocations

  # Rota $disconnect
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectIntegration

  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketHandler.Arn}/invocations

  # Rota register
  RegisterRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: register
      AuthorizationType: NONE
      OperationName: RegisterRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref RegisterIntegration

  RegisterIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketHandler.Arn}/invocations

  # Deployment e Stage do WebSocket - CORRIGIDO
  WebSocketDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - DisconnectRoute
      - RegisterRoute
    Properties:
      ApiId: !Ref WebSocketApi

  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketApi
      DeploymentId: !Ref WebSocketDeployment
      StageName: prod

  # Permissões para invocar a Lambda
  WebSocketPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketHandler
      Principal: apigateway.amazonaws.com

  ProcessTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: toro-ai-assistant-process-topic

  NotifyTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: toro-ai-assistant-notify-topic

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/questions"
  QuestionsTable:
    Description: "DynamoDB table for questions and answers"
    Value: !Ref QuestionsTable
  KnowledgeBaseId:
    Description: "Knowledge Base ID used for RAG"
    Value: !Ref KnowledgeBaseId
  ProcessTopic:
    Description: "ARN of the SNS topic for processing"
    Value: !Ref ProcessTopic
  NotifyTopic:
    Description: "ARN of the SNS topic for notifications"
    Value: !Ref NotifyTopic
  WebSocketEndpoint:
    Description: "WebSocket API Endpoint"
    Value: !Sub "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${WebSocketStage}"
  ConnectionsTable:
    Description: "DynamoDB table for WebSocket connections"
    Value: !Ref ConnectionsTable
